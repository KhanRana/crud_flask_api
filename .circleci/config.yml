version: 2.1
orbs:
  python: circleci/python@3.0.0
  aws-cli: circleci/aws-cli@5.1.2

jobs:
  build_and_test_app:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run: pip install -r requirements.txt
      - run: 
          name: App Server
          command: python app.py
          background: true
        # run and save the tests
      - run: python -m pytest tests/
      - persist_to_workspace:
          root: .
          paths:
            - 'tests'
            
      - attach_workspace:
          at: /tmp/workspace

      - store_test_results:
          path: /tmp/workspace/tests

      - store_artifacts:
          path: /tmp/workspace
          destination: artifacts

  build_and_push_docker_image:
    docker: 
      - image: cimg/base:2024.02
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.24
        
      - run: docker build -t khanrana/flask:${CIRCLE_SHA1} .
      - run:
          name: Run Flask app in Docker container
          command: | 
            docker run -d --name flask -p 5500:5500 khanrana/flask:${CIRCLE_SHA1}
            docker stop flask
            docker rm flask

      - run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run: docker push khanrana/flask:${CIRCLE_SHA1}
  # build and push to ecr
  push_image_to_ecr:
    executor: aws-cli/default
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      # install aws cli
      - aws-cli/install
      # create aws config and credentials file
      - run: 
          name: Create AWS config and credentials file
          command: |
            mkdir ~/.aws
            touch ~/.aws/credentials ~/.aws/config
      - run:
          name: Configure AWS CLI
          command: |
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
            echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = $AWS_REGION" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config  
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            
      - run:
          name: Build and push Docker image to ECR
          command: |
            docker build -t khanrana/flask:${CIRCLE_SHA1} .
            docker tag khanrana/flask:${CIRCLE_SHA1} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/khanrana/flask:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/khanrana/flask:latest



workflows:
  build_and_deploy:
    jobs:
      - build_and_test_app
      - build_and_push_docker_image:
          requires:
            - build_and_test_app
      - push_image_to_ecr:
          requires:
            - build_and_push_docker_image
